{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Statistics/Notification/Notification.jsx","App.js","index.js"],"names":["Buttons","styled","div","FeedbackOptions","options","onLeaveFeedback","map","option","label","replace","toUpperCase","onClick","Statistics","good","neutral","bad","total","positivePercentage","Container","section","Section","title","children","Notification","message","App","state","setState","prevState","getQuantityByType","typeFeedback","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAEMA,EAAUC,IAAOC,IAAV,ub,OCCb,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,cAACL,EAAD,UACGI,EAAQE,KAAI,SAAAC,GACX,IAAMC,EAAQD,EAAOE,QAAQF,EAAO,GAAIA,EAAO,GAAGG,eAClD,OACE,wBAAqBC,QAAS,kBAAMN,EAAgBE,IAApD,SACGC,GADUD,QCPvB,SAASK,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qCACE,uCACQ,+BAAOJ,OAEf,0CACW,+BAAOC,OAElB,sCACO,+BAAOC,OAEd,wCACS,+BAAOC,OAEhB,oDACqB,iCAAOC,EAAP,aChB3B,IAAMC,EAAYjB,IAAOkB,QAAV,mDCCf,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,eAACJ,EAAD,WACE,6BAAKG,IACJC,KCLP,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,ICGb,IAAMpB,EAAU,CAAC,OAAQ,UAAW,OAE9BqB,E,4MACJC,MAAQ,CACNb,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPV,gBAAkB,SAAAE,GAChB,EAAKoB,UAAS,SAAAC,GAAS,sBACpBrB,EAASqB,EAAUrB,GAAU,O,EAIlCsB,kBAAoB,SAAAC,GAClB,OAAO,EAAKJ,MAAMI,I,EAGpBC,mBAAqB,WACnB,MAA+B,EAAKL,MACpC,OADA,EAAQb,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBiB,gCAAkC,WAChC,IAAMhB,EAAQ,EAAKe,qBACblB,EAAO,EAAKa,MAAMb,KACxB,OAAOoB,KAAKC,MAAOrB,EAAOG,EAAS,M,4CAGrC,WACE,IACEX,EAIE8B,KAJF9B,gBACA0B,EAGEI,KAHFJ,mBACAF,EAEEM,KAFFN,kBACAG,EACEG,KADFH,gCAGF,OACE,qCACE,cAACZ,EAAD,CAASC,MAAO,wBAAhB,SACE,cAAClB,EAAD,CACEC,QAASA,EACTC,gBAAiBA,MAGrB,cAACe,EAAD,CAASC,MAAO,aAAhB,SACGU,IAAuB,EACtB,cAACnB,EAAD,CACEC,KAAMgB,EAAkB,QACxBf,QAASe,EAAkB,WAC3Bd,IAAKc,EAAkB,OACvBb,MAAOe,IACPd,mBAAoBe,MAGtB,cAACT,EAAD,CAAcC,QAAS,+B,GAtDjBY,aCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.45eef96f.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst Buttons = styled.div`\n  & button {\n    padding: 2px 10px;\n    border: 1px solid lightgray;\n    border-radius: 4px;\n    background-color: transparent;\n    cursor: pointer;\n    transition: background-color 150ms linear;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(94, 152, 247, 1);\n      border-color: transparent;\n      outline: none;\n    }\n\n    &:not(:last-child) {\n      margin-right: 5px;\n    }\n  }\n`;\n\nexport { Buttons };\n","import PropTypes from 'prop-types';\nimport { Buttons } from './FeedbackOptions.styled';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <Buttons>\n      {options.map(option => {\n        const label = option.replace(option[0], option[0].toUpperCase());\n        return (\n          <button key={option} onClick={() => onLeaveFeedback(option)}>\n            {label}\n          </button>\n        );\n      })}\n    </Buttons>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func,\n};\n\nexport { FeedbackOptions };\n","import PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      <p>\n        Good: <span>{good}</span>\n      </p>\n      <p>\n        Neutral: <span>{neutral}</span>\n      </p>\n      <p>\n        Bad: <span>{bad}</span>\n      </p>\n      <p>\n        Total: <span>{total}</span>\n      </p>\n      <p>\n        Positive feedback: <span>{positivePercentage}%</span>\n      </p>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport { Statistics };\n","import styled from '@emotion/styled';\n\nconst Container = styled.section`\n  padding: 10px 40px;\n`;\n\nexport { Container };\n","import PropTypes from 'prop-types';\nimport { Container } from './Section.styled';\n\nfunction Section({ title, children }) {\n  return (\n    <Container>\n      <h2>{title}</h2>\n      {children}\n    </Container>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport { Section };\n","import PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport { Notification };\n","import React, { Component } from 'react';\nimport { FeedbackOptions } from './components/FeedbackOptions/FeedbackOptions';\nimport { Statistics } from './components/Statistics/Statistics';\nimport { Section } from 'components/Section/Section';\nimport { Notification } from './components/Statistics/Notification/Notification';\n\nconst options = ['good', 'neutral', 'bad'];\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = option => {\n    this.setState(prevState => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n\n  getQuantityByType = typeFeedback => {\n    return this.state[typeFeedback];\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const good = this.state.good;\n    return Math.round((good / total) * 100);\n  };\n\n  render() {\n    const {\n      onLeaveFeedback,\n      countTotalFeedback,\n      getQuantityByType,\n      countPositiveFeedbackPercentage,\n    } = this;\n\n    return (\n      <>\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={onLeaveFeedback}\n          />\n        </Section>\n        <Section title={'Statistics'}>\n          {countTotalFeedback() > 0 ? (\n            <Statistics\n              good={getQuantityByType('good')}\n              neutral={getQuantityByType('neutral')}\n              bad={getQuantityByType('bad')}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message={'No feedback given'} />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}